<html>
<script language="JavaScript" type="text/JavaScript">
<!--
var obeImages = new Array;
var eyeglass = new Image;
 
function preLoadImages()
{
  eyeglass.src = "images/view_image.gif";
  images = document.images;
  // Only load images with class="imgborder_off"
  for (i = 0; i < images.length; i++)
  {
    image = images[i];
    if (image.className.substr(0, 10) == "imgborder_")
    {
        img = new Image;
        img.id = image.id;
        img.name = image.name;
        img.src = "images/" + image.name + ".gif";
        obeImages[img.name] = img;
    }
  }
}
 
function showImage(obj)
{
  if (obj.className.substr(0, 10) == "imgborder_")
  {
    newImg = obeImages[obj.name];
    obj.src = newImg.src;
    if (obj.border > 0)
    {
      obj.className = "imgborder_on";
    }
  }
}
 
function hideImage(obj)
{
  if (obj.className.substr(0, 10) == "imgborder_")
  {
    obj.src = eyeglass.src;
    obj.className = "imgborder_off";
  }
}
 
function showAllImages()
{
  imgs = document.images;
  for (i=0; i < imgs.length; i++)
  {
    showImage(imgs[i]);
  }
}
 
function hideAllImages()
{
  imgs = document.images;
  for (i=0; i < imgs.length; i++)
  {
    hideImage(imgs[i]);
  }
}
//-->
</script>

<link href="../../library/otn_new.css" rel="stylesheet" type="text/css">



<title>Using Extended Statistics to Optimize Multi-Column Relationships and Function Based Statistics</title>

<style type="text/css">
<!--
.style1 {font-size: 12px}
-->
</style>
<link rel="stylesheet" href="file:///D|/My%20Documents/Work/New%20Features/10gR2/OBE/library/otn_new.css" type="text/css">
<style type="text/css">
<!--
.style8 {
	font-family: "Courier New", Courier, mono;
	font-weight: bold;
}
.style9 {font-family: "Courier New", Courier, mono}
.style10 {color: #FF0000}
-->
</style>
<body bgcolor="#FFFFFF" text="#000000">
<h3 align="left" class="topstoryhead">Using Extended Statistics to Optimize Multi-Column 
  Relationships and Function-Based Statistics <i></i></h3>
<h4 class="navheader">Purpose</h4>
<p class="bodycopy">The goal of this tutorial is to show you how to use extended 
  statistics to optimize multi-column relationships and function-based statistics. 
</p>
<h4 class="navheader">Time to Complete</h4>
<p class="bodycopy">Approximately 30 minutes </p>
<h4 class="navheader"><a name="t"></a>Topics</h4>
<p class="bodycopy">This tutorial covers the following topics:</p>
<table width="600" border="0" cellpadding="1" cellspacing="0">
  <tbody> 
  <tr valign="top"> 
    <td width="15"><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="bodylink"><a href="#o" class="bodylink">Overview</a></td>
  </tr>
  <tr valign="top"> 
    <td width="15"><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="bodylink"><a href="#p" class="bodylink">Prerequisites</a></td>
  </tr>
  <tr valign="top">
    <td><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="boldbodycopy"><a href="#t1" class="bodylink">Determining Single 
Column Statistics</a></td>
  </tr>
  <tr valign="top">
    <td><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="boldbodycopy"><a href="#t2" class="bodylink">Gathering Histograms on  Skewed Columns </a></td>
  </tr>
  <tr valign="top">
    <td><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="boldbodycopy"><a href="#t3" class="bodylink">Creating Extended Statistics to Correlate Columns </a></td>
  </tr>
  <tr valign="top">
    <td><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="boldbodycopy"><a href="#t4" class="bodylink">Creating Extended Statistics for a Function Used on a Column </a></td>
  </tr>
  <tr valign="top">
    <td><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="boldbodycopy"><a href="#t5" class="bodylink">Cleanup</a></td>
  </tr>
  <tr valign="top"> 
    <td><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="bodylink"><a href="#s" class="bodylink">Summary</a></td>
  </tr>
  </tbody> 
</table>
<h4 class="navheader">Viewing Screenshots</h4>
<p class="bodycopy"><img src="images/view_image.gif" width="24" height="24" align="absmiddle" onMouseOver="showAllImages()"><b><span class="style1"><font color="#ff0000" face="Arial, Helvetica, sans-serif">Place 
  the cursor over this icon to load and view all the screenshots for this tutorial. 
  (Caution: This action loads all screenshots simultaneously, so response time 
  may be slow depending on your Internet connection.)</font></span></b></p>
<p class="bodycopy"><b>Note: </b>Alternatively, you can place the cursor over an individual icon in the following steps to load and view only the screenshot associated with that step. You can hide an individual screenshot by clicking it.</p>
<h3 class="navheader"><a name="o"></a>Overview</h3>
<p class="bodycopy"> In real-world data there is often a correlation between two 
  or more columns in a table. For example, job title and salary are related (the 
  VP of a company is likely to earn a lot more than the janitor does) or car make 
  and price (a BMW is likely to be a lot more expensive than a Honda). Up until 
  now, the optimizer has had no way of knowing that these relationships exist 
  between the columns in a table. When a query was executed against the table 
  with multiple, single column predicates, it was impossible for the optimizer 
  to calculate the correct selectivity of these predicates as it had no way of 
  knowing if the columns were related or not. <br>
<br>
  It has also been extremely hard for the optimizer to calculate the correct selectivity 
  for a column that has a function apply to it. For example, UPPER(surname)=.SMITH.<br>
<br>
  In Oracle Database 11<i>g</i>, extended statistics (multi-column statistics) 
  have been introduced, which allow you to collect statistics on a group of columns 
  as a whole and on functions, thus enabling the optimizer to calculate the selectivity 
  of these predicates correctly. As a result, the optimizer is aware of the correct 
  selectivity (cardinality). This tutorial demonstrates why you need extended 
  statistics and how you can create them.</p>
<p align="right" class="bodylink"><a href="#t">Back to Topic List</a></p>
<h3 class="navheader"><a name="p"></a>Prerequisites</h3>
<p class="bodycopy">Before starting this tutorial, you should first complete the 
  following steps:</p>
<table border="0" cellspacing="0" cellpadding="1" width="590">
  <tbody> 
  <tr valign="top"> 
    <td width="15" class="bodycopy"><b>1.</b></td>
    <td colspan="2" class="bodylink">
      <p>Install Oracle Database 11<i>g</i>. </p>
      <p>&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b>2.</b></td>
    <td colspan="2" class="bodylink">
      <p>Make sure the <font face="Courier New, Courier, mono">SH</font> user 
        is unlocked. Open a terminal window and execute the following:</p>
        <pre><span class="bodycopy"><span class="style8">sqlplus sys/&lt;syspassword&gt; as sysdba
alter user sh identified by sh account unlock;
exit</span></span></pre>
        <p><span class="bodycopy"></span></p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b>3.</b></td>
    <td colspan="2" class="bodylink">
      <p>Download and unzip the<font face="Courier New, Courier, mono"> <a href="files/multicolstats.zip">multicolstats.zip</a></font> 
        file into a working directory.</p>
      <p>&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b>4.</b></td>
    <td colspan="2" class="bodylink">
      <p>You need to create and load the data for the <span class="style9">CUSTOMERS_OBE</span> 
        table. From your terminal window, execute the following:</p>
      <pre><span class="bodycopy"><span class="style8">cd &lt;sql_files_directory&gt;
</span></span><span class="bodycopy"><span class="style8">imp sh/sh file= customers_obe.dmp log=imp.log full=y</span></span></pre>
      <p><span class="bodycopy"><span class="style8"><span class="navheader"><img src="images/view_image.gif" name="prereq" border="1" class="imgborder_off" id="prereq" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></span></span></p>
      <p><span class="bodycopy"><span class="style8"><br>
      </span></span></p></td>
  </tr>
  </tbody> 
</table>
<p align="right" class="bodylink"><a href="#t">Back to Topic List</a></p>
<h3 class="navheader"><a name="t1" id="t1"></a>Determining Single 
Column Statistics</h3>
<p class="bodycopy">A good example of correlated or related columns are the <span class="style9">country_id</span> 
  and <span class="style9">cust_state_province</span> columns in the <span class="style9">CUSTOMERS_OBE</span> 
  table. When the value of <span class="style9">cust_state_provinc</span>e is 
  'CA' , the value of <span class="style9">country_id</span> is 'US'. There is 
  a skew in the data in these two columns, which means the majority of rows in 
  the table have the values 'CA' and 'US'. Both the relationship between the columns 
  and the skew in the data make it difficult for the optimizer to calculate the 
  selectivity or cardinality of these columns correctly when they are used together 
  in a query.&nbsp; Extended statistics should help in this situation. Let's begin 
  by checking what the actual cardinality or number of rows in the <span class="style9">CUSTOMERS_OBE</span> 
  table is when the <span class="style9">country_id</span> is 'US' and <span class="style9">cust_state_provinc</span>e 
  is 'CA'. Perform the following steps:</p>
<table border="0" cellspacing="0" cellpadding="1" width="650">
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 1.</b></td>
    <td colspan="2"><p class="bodycopy">You first want to check  what the  actual cardinality or number of rows in the <span class="style9">CUSTOMER_OBE</span> table is when the <span class="style9">country_id</span> is 'US' and <span class="style9">cust_state_province</span> is 'CA'. Open a terminal window and execute the following commands: </p>
        
      <pre class="bodycopy"><span class="style8">CD&lt;sql_files_directory&gt;
sqlplus sh/sh
set echo on
@check_cardinality</span></pre>
        <p class="bodycopy">The <span class="style9">check_cardinality.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">select count(*)<br>from customers_obe<br>where country_id = 'US' and cust_state_province = 'CA';</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats01" border="1" class="imgborder_off" id="stats01" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp;</p>
    </td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b> 2.</b></td>
    <td colspan="2"><p class="bodycopy">Now that you  know the actual number of rows returned, you can gather statistics on the table. From your terminal window, execute the following SQL script: </p>
        <pre class="bodycopy"><span class="style8">@gather_stats</span></pre>
        <p class="bodycopy">The <span class="style9">gather_stats.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">exec dbms_stats.gather_table_stats(null,'customers_obe', -<br>      method_opt =&gt; 'for all columns size 1');</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats02" border="1" class="imgborder_off" id="stats02" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b> 3.</b></td>
    <td colspan="2">
      <p class="bodycopy"> Review the column statistics that were generated. From 
        your terminal window, execute the following SQL scripts: </p>
        <pre class="bodycopy"><span class="style8">@review_stats</span></pre>
        <p class="bodycopy">The <span class="style9">review_stats.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">select column_name, num_distinct, histogram<br>from user_tab_col_statistics where table_name = 'CUSTOMERS_OBE';</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats03" border="1" class="imgborder_off" id="stats03" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        
      <p class="bodycopy">You see that the number of distinct values are for both 
        the <font face="Courier New, Courier, mono">country_id</font> and <font face="Courier New, Courier, mono">cust_state_province</font> 
        columns. Both of these values look accurate.</p>
        <p class="bodycopy">&nbsp;</p>
    </td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b> 4.</b></td>
    <td colspan="2"><p class="bodycopy">Given these statistics,  check the number of rows the optimizer estimates  will be returned by the query.  From your terminal window, execute the following SQL script: </p>
        <pre class="bodycopy"><span class="style8">@explain_plan</span></pre>
        <p class="bodycopy">The <span class="style9">explain_plan.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">explain plan for<br>select *<br>from customers_obe<br>where country_id = 'US' and cust_state_province = 'CA';<br>
select plan_table_output<br>from table(dbms_xplan.display('plan_table',null,'BASIC ROWS'));</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats04" border="1" class="imgborder_off" id="stats04" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        
      <p class="bodycopy">With just basic statistics, the optimizer thinks there 
        will only be 1 row returned. Because you know that this is not true, you 
        need to provide better statistics to the optimizer so it can determine 
        the correct row count. </p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
</table>
<p align="right" class="bodylink"><a href="#t">Back to Topic List</a></p>
<h3 class="navheader"><a name="t2" id="t2"></a>Gathering Histograms on  Skewed Columns <span class="style10"></span> </h3>
<p class="bodycopy">Prior to Oracle Database 11<i>g</i>, there was no way to tell 
  the optimizer what the correct combined selectivity is for multiple columns. 
  The only insight given to the optimizer was that there was a data skew in both 
  of these columns. By making the optimizer aware of the data skew in Oracle Database 
  11<i>g</i>, a more accurate selectivity can be calculated. In Oracle Database 
  11<i>g</i>, you can gather histograms on the skewed columns. After you have 
  histograms on the columns, you can recheck the optimizer's estimate for the 
  number of rows. Perform the following steps:</p>
<table border="0" cellspacing="0" cellpadding="1" width="650">
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 1.</b></td>
    <td colspan="2"><p class="bodycopy"> Gather a histogram on the skewed columns. From your terminal window, execute the following SQL script: </p>
        <pre class="bodycopy"><span class="style8">@gather_histogram</span></pre>
        <p class="bodycopy">The <span class="style9">gather_histogram.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">exec dbms_stats.gather_table_stats(null,'customers_obe', -<br>      method_opt =&gt; 'for all columns size skewonly');<br>
select column_name, num_distinct, histogram<br>from user_tab_col_statistics where table_name = 'CUSTOMERS_OBE';</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats05" border="1" class="imgborder_off" id="stats05" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 2.</b></td>
    <td colspan="2"><p class="bodycopy"> Now you can generate the explain plan to see what the optimizer estimates are now. From your terminal window, execute the following SQL script: </p>
        <pre class="bodycopy"><span class="style8">@explain_plan</span></pre>
        <p class="bodycopy">The <span class="style9">explain_plan.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">explain plan for<br>select *<br>from customers_obe<br>where country_id = 'US' and cust_state_province = 'CA';<br>
select plan_table_output<br>from table(dbms_xplan.display('plan_table',null,'BASIC ROWS'));</pre>
<p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats06" border="1" class="imgborder_off" id="stats06" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        
      <p class="bodycopy">There is a slight improvement in the estimate because 
        there are histograms for individual columns. However, the optimizer is 
        still not aware that there is a relationship or correlation between the 
        two columns. </p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
</table>
<p align="right" class="bodylink"><a href="#t">Back to Topic List</a></p>
<h3 class="navheader"><a name="t3" id="t3"></a>Creating Extended Statistics to Correlate Columns <span class="style10"></span> </h3>
<p class="bodycopy">In Oracle Database 11<i>g</i>, the optimizer can learn about 
  this correlation by creating extended statistics for the columns. Extended statistics 
  means the next time you gather statistics on the <span class="style9">CUSTOMERS_OBE</span> 
  table, an extra set of statistics for the combined group of <span class="style9">country_id</span> 
  and <span class="style9">cust_state_province</span> is gathered. Perform the 
  following steps:</p>
<table border="0" cellspacing="0" cellpadding="1" width="650">
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 1.</b></td>
    <td colspan="2"><p class="bodycopy">Create the extended statistics group. From your terminal window, execute the following SQL script: </p>
        <pre class="bodycopy"><span class="style8">@create_extended_stats</span></pre>
        <p class="bodycopy">The <span class="style9">create_extended_stats.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">select  dbms_stats.create_extended_stats(null,'customers_obe',<br>         '(country_id, cust_state_province)')<br>from dual;</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats07" border="1" class="imgborder_off" id="stats07" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        
      <p class="bodycopy">The output of <span class="style9">create_extended_stats.sql</span> 
        is a system-generated name for the virtual column that gets created.</p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b> 2.</b></td>
    <td colspan="2">
      <p class="bodycopy">Execute the script you ran previously to gather a 
        histogram on the skewed columns. From your terminal window, execute the 
        following SQL script:</p>
        <pre class="bodycopy"><span class="style8">@gather_histogram</span></pre>
        <p class="bodycopy">The <span class="style9">gather_histogram.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">exec dbms_stats.gather_table_stats(null,'customers_obe', -<br>      method_opt =&gt; 'for all columns size skewonly');<br>
select column_name, num_distinct, histogram<br>from user_tab_col_statistics where table_name = 'CUSTOMERS_OBE';</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats08" border="1" class="imgborder_off" id="stats08" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        
      <p class="bodycopy">You should see a new column listed for the table that 
        has a system-generated name, which was returned by the <span class="style9">create_extended_stats</span> 
        procedure. </p>
        <p>&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b> 3.</b></td>
    <td colspan="2"><p class="bodycopy">Rerun the explain plan. From your terminal window, execute the following script: </p>
        <pre class="bodycopy"><span class="style8">@explain_plan</span></pre>
        <p class="bodycopy">The <span class="style9">explain_plan.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">explain plan for<br>select *<br>from customers_obe<br>where country_id = 'US' and cust_state_province = 'CA';<br>
select plan_table_output<br>from table(dbms_xplan.display('plan_table',null,'BASIC ROWS'));</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats10" border="1" class="imgborder_off" id="stats10" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">Now the optimizer gets the correct number of rows for the query.</p>
        <p>&nbsp;</p></td>
  </tr>
</table>
<p align="right" class="bodylink"><a href="#t">Back to Topic List</a></p>
<h3 class="navheader"><a name="t4" id="t4"></a>Creating Extended Statistics for a Function Used on a Column <span class="style10"></span> </h3>
<p class="bodycopy">The optimizer can also have trouble finding the right cardinality 
  when there is a function or expression used on a column. Take the <span class="style9">LOWER</span> 
  function for example; this function takes a string or a character column and 
  returns that string in all lowercase letters. Perform the following steps:</p>
<table border="0" cellspacing="0" cellpadding="1" width="650">
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 1.</b></td>
    <td colspan="2">
      <p class="bodycopy"> You want to run a query using a function that selects 
        the total number of rows who have a <span class="style9">country_id</span> 
        equal to 'US'. The value passed to the query is in lowercase so the <span class="style9">LOWER</span> 
        function to the column <span class="style9">country_id</span> is specified. 
        From your terminal window, execute the following script: </p>
        <pre class="bodycopy"><span class="style8">@get_count_lower</span></pre>
        <p class="bodycopy">The <span class="style9">get_count_lower.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">select count(*)<br>from customers_obe<br>where lower(country_id) = 'us';</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats11" border="1" class="imgborder_off" id="stats11" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">The actual number of rows is returned.</p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 2.</b></td>
    <td colspan="2"><p class="bodycopy">Now you can run the explain plan again to see how many rows the optimizer thinks this query will return. From your terminal window, execute the following script: </p>
        <pre class="bodycopy"><span class="style8">@explain_plan_lowercase</span></pre>
        <p class="bodycopy">The <span class="style9">explain_plan_lowercase.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">explain plan for<br>select *<br>from customers_obe<br>where lower(country_id) = 'us';<br>
select plan_table_output<br>from table(dbms_xplan.display('plan_table',null,'BASIC ROWS'));</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats12" border="1" class="imgborder_off" id="stats12" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">The optimizer did not get close to the right number of rows. </p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 3.</b></td>
    <td colspan="2">
      <p class="bodycopy">If you create extended statistics for the expression 
        <span class="style9">LOWER(country_id)<font face="Arial, Helvetica, sans-serif">,</font></span> 
        you can help the optimizer get the correct number of rows. In the standard<span class="style9"> 
        gather_table_stats</span> procedure, the <span class="style9">method_opt</span> 
        argument allows you to specify the extension or the extended statistic 
        you want to collect. The <span class="style9">gather_table_stats</span> 
        procedure creates the extended statistics automatically if it does not 
        exist. From your terminal window, execute the following script: </p>
        <pre class="bodycopy"><span class="style8">@gather_stats_lower_col</span></pre>
        <p class="bodycopy">The <span class="style9">gather_stats_lower_col.sql</span> code is as follows:</p>
      <pre class="bodycopy style9">exec dbms_stats.gather_table_stats(null,'customers_obe', -<br>      method_opt =&gt;  -<br>      'for all columns size skewonly for columns (lower(country_id))');</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats13" border="1" class="imgborder_off" id="stats13" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 4.</b></td>
    <td colspan="2">
      <p class="bodycopy">Now that you created the extended statistic and gathered 
        statistics, you can look at the statistics for the <span class="style9">CUSTOMERS_OBE</span> 
        table. You should see a new column with a system-generated name. From 
        your terminal window, execute the following script: </p>
        <pre class="bodycopy"><span class="style8">@review_col_stats</span></pre>
        <p class="bodycopy">The <span class="style9">review_col_stats.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">select column_name, num_distinct, histogram<br>from user_tab_col_statistics where table_name = 'CUSTOMERS_OBE';</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats14" border="1" class="imgborder_off" id="stats14" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b> 5.</b></td>
    <td colspan="2"><p class="bodycopy">Rerun the explain plan to see what the optimizer estimates. From your terminal window, execute the following script: </p>
        <pre class="bodycopy"><span class="style8">@explain_plan_lowercase</span></pre>
        <p class="bodycopy">The <span class="style9">explain_plan_lowercase.sql</span> code is as follows:</p>
        <pre class="bodycopy style9">explain plan for<br>select *<br>from customers_obe<br>where lower(country_id) = 'us';<br>
select plan_table_output<br>from table(dbms_xplan.display('plan_table',null,'BASIC ROWS'));</pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats15" border="1" class="imgborder_off" id="stats15" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp; </p></td>
  </tr>
  <tr valign="top">
    <td class="bodycopy"><b> 6.</b></td>
    <td colspan="2">
      <p class="bodycopy">You can also regenerate the virtual column definition 
        from the system-generated name. From your terminal window, execute the 
        following command: </p>
        <pre class="bodycopy"><span class="style8">select dbms_metadata.get_ddl('TABLE','CUSTOMERS_OBE') from dual;</span></pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="stats17" border="1" class="imgborder_off" id="stats17" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp; </p></td>
  </tr>
</table>
<p align="right" class="bodylink"><a href="#t">Back to Topic List</a></p>
<h3 class="navheader"><a name="t5" id="t5"></a>Cleanup<span class="style10"></span> </h3>
<p class="bodycopy">Now you can cleanup your environment by performing the following steps:</p>
<table border="0" cellspacing="0" cellpadding="1" width="650">
  <tr valign="top">
    <td width="25" class="bodycopy"><b> 1.</b></td>
    <td colspan="2"><p class="bodycopy"> From your SQL*Plus session, execute the following command: </p>
        <pre class="bodycopy"><span class="style8">DROP TABLE CUSTOMERS_OBE;</span></pre>
        <p class="bodycopy"><span class="navheader"><img src="images/view_image.gif" name="cleanup" border="1" class="imgborder_off" id="cleanup" onClick="hideImage(this)" onMouseOver="showImage(this)"></span></p>
        <p class="bodycopy">&nbsp;</p></td>
  </tr>
</table>
<p align="right" class="bodylink"><a href="#t">Back to Topic List</a></p>
<p class="navheader"><a name="s"></a>Summary</p>
<p class="bodycopy">In this tutorial, you learned how to:</p>
<table border="0" cellpadding="1" cellspacing="0">
  <tr valign="top"> 
    <td width="15" class="bodycopy"><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="bodycopy">Determine single column statistics</td>
  </tr>
  <tr valign="top"> 
    <td width="15" class="bodycopy"><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="bodycopy">Gather histograms on skewed columns </td>
  </tr>
  <tr valign="top"> 
    <td width="15" class="bodycopy"><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="bodycopy">Create extended statistics to correlate columns </td>
  </tr>
  <tr valign="top">
    <td width="15" class="bodycopy"><img src="images/bullet.gif" width="16" height="16"></td>
    <td colspan="2" class="bodycopy">Create extended statistics for a function used on a column </td>
  </tr>
  <tbody> </tbody> 
</table>
<p align="right"><a href="#t" class="bodylink">Back to Topic List</a> </p>
<p class="navheader"><span class="bodycopy"><img src="images/view_image.gif" width="24" height="24" align="absmiddle" onMouseOver="hideAllImages()"></span> <b class="bodycopy"><font color="#FF0000">Place your cursor on this icon to hide all screenshots.</font></b></p>
<p>&nbsp;</p>
<h4>&nbsp;</h4>
<h4>&nbsp;</h4>
</body>
<script language="JavaScript" type="text/JavaScript">

<!--

preLoadImages();

//-->

</script>
</html>

